# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

executors:
  default:
    docker:
      - image: cimg/base:current
jobs:
  build:
    parameters:
      os:
        type: string
      install-type:
        type: string
    executor: default
    environment:
      XDMOD_REALMS: 'jobs,storage,cloud,resourcespecifications'
      QA_BRANCH: 'v2'
    steps:
      - checkout
      - setup_remote_docker
      # We need to update our acct before we can enable docker layer caching
      #    docker_layer_caching: true
      - run:
          name: Docker Compose corresponding OS file
          command: docker compose -f tests/playwright/Docker/docker-compose.yml up -d
      - run:
          name: Copy Files for Playwright and XDMoD containers
          command: |
            docker cp ~/project xdmod:/xdmod
            docker cp ~/project playwright:/xdmod
      - run:
          name: Create test result directories
          command: |
            mkdir ~/phpunit
            mkdir /tmp/screenshots
      - run:
          name: Create Test Artifact Directories in XDMoD
          command: |
            docker exec xdmod mkdir /root/phpunit
            docker exec xdmod mkdir /tmp/screenshots
      - run:
          name: Install XDMoD Composer Dependencies
          command: docker exec -w /xdmod xdmod composer install
      - run:
          name: Build XDMoD RPM
          command: docker exec -w /xdmod xdmod /root/bin/buildrpm xdmod
      - run:
          name: Install / Upgrade XDMoD from the newly created RPM
          command: docker exec -e XDMOD_TEST_MODE=<< parameters.install-type >> xdmod /xdmod/tests/ci/bootstrap.sh
      - run:
          name: Validate that the install / upgrade went as expected
          command: docker exec -w /xdmod xdmod /xdmod/tests/ci/validate.sh
      - run:
          name: Make sure that the test dependencies are installed
          command: docker exec -w /xdmod xdmod composer install
      - run:
          name: Setup the SimpleSAML server etc. so we can test SSO
          command: docker exec xdmod /xdmod/tests/ci/samlSetup.sh
      - when:
          condition:
            equal: [ << parameters.install-type >>, 'upgrade' ]
          steps:
            - run:
                name: Checkout QA Repo
                command: docker exec -w /root xdmod git clone --depth=1 --branch="v2" https://github.com/ubccr/xdmod-qa.git /root/.qa
            - run:
                name: Install QA dependencies
                command: docker exec -w /xdmod xdmod /root/.qa/scripts/install.sh
            - run:
                name: Configure xdmod as a safe directory
                command: docker exec -w /xdmod xdmod git config --global --add safe.directory /xdmod
            - run:
                name: Setup remote upstream
                command: docker exec -w /xdmod xdmod git remote add upstream https://github.com/ubccr/xdmod.git
            - run:
                name: Install unit test dependencies
                command: docker exec -w /xdmod xdmod composer install
            - run:
                name: Copy portal_settings.ini into place
                command: docker exec xdmod cp /etc/xdmod/portal_settings.ini /xdmod/configuration/portal_settings.ini
            - run:
                name: Run QA Tests
                command: docker exec -w /xdmod xdmod /root/.qa/scripts/build.sh
      - run:
          name: Make sure that the Test Dependencies are installed
          command: docker exec -w /xdmod xdmod composer install --no-progress
      - run:
          name: Run Regression Tests
          command: docker exec -w /xdmod xdmod /xdmod/tests/regression/runtests.sh
      - run:
          name: Setup Configuration Files for Integration Tests
          command: |
            docker exec xdmod mv /xdmod/configuration/organization.json /xdmod/configuration/organization.json.old
            docker exec xdmod mv /xdmod/configuration/portal_settings.ini /xdmod/configuration/portal_settings.ini.old
            docker exec xdmod cp /etc/xdmod/portal_settings.ini /xdmod/configuration/portal_settings.ini
            docker exec xdmod cp /etc/xdmod/organization.json /xdmod/configuration/organization.json
      - run:
          name: Running Integration Tests
          command: docker exec -w /xdmod xdmod /xdmod/tests/integration/runtests.sh --junit-output-dir /root/phpunit
      - run:
          name: Run Regression Post Ingest Tests
          command: docker exec -w /xdmod xdmod /xdmod/tests/regression/post_ingest_test.sh --junit-output-dir /root/phpunit
      - run:
          name: Run Component Tests
          command: docker exec -w /xdmod xdmod /xdmod/tests/component/runtests.sh --junit-output-dir /root/phpunit
      - run:
          name: Update the HTTPD config file
          command: docker exec xdmod sed -i 's/ServerName localhost/ServerName xdmod/g' /etc/httpd/conf.d/xdmod.conf
      - run:
          name: Restart XDMoD's services
          command: docker exec xdmod /root/bin/services restart
      - run:
          name: Run Playwright Tests
          command: docker exec -w "/xdmod/tests/playwright" playwright /xdmod/tests/playwright/runtests.sh -j << parameters.os >>
      - run:
          name: Test to make sure that we don't have any unexpected apache errors
          command: docker exec xdmod test '\$\(fgrep -v \" [ssl:warn] \" /var/log/xdmod/apache-error.log | wc -l\) = 0'
      - run:
          name: Copy Test Results into Unit
          command: |
            docker cp xdmod:/root/phpunit ~/phpunit
            docker cp xdmod:/tmp/screenshots /tmp/screenshots
            mkdir ~/project/log
            docker cp xdmod:/var/log/xdmod ~/project/log
            docker cp playwright:/xdmod/tests/playwright/test_results-<< parameters.os >>.xml ~/phpunit
            docker cp playwright:/xdmod/tests/playwright/test-results /tmp/screenshots
      - run:
          name: Run on fail status
          command: |
            docker cp playwright:/xdmod/tests/playwright/test-results /tmp/screenshots
          when: on_fail
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: ~/project/log
      - store_test_results:
          path: ~/phpunit
workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: ['rocky8']
              install-type: ["fresh_install", "upgrade"]
